install.packages("ggplot2")
install.packages("tm")
install.packages("SnowballC")
getReaders()
policy.HTML.page <- readLines("http://policy.unt.edu/policy/3-5")
length(policy.HTML.page)
policy.HTML.page[186:202]
id.1 <- 3 + which(policy.HTML.page == "                    TOTAL UNIVERSITY        </div>"
dafsda
id.1 <- 3 + which(policy.HTML.page == "                    TOTAL UNIVERSITY        </div>")
id.2 <- id.1 + 5
text.data <- policy.HTML.page[id.1:id.2]
rm(policy.HTML.page, id.1, id.2)
text.data
td.1 <- gsub(Pattern = "<p>", replacement == "", x = text.data, ignore.case = TRUE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
td.1 <- gsub(pattern = "<P>", replacement == "", x = text.data, ignore.case = TRUE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
td.1 <- gsub(pattern = "<P>", replacement == " ", x = text.data, ignore.case = TRUE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
gsub
td.1 <- gsub(pattern = "<P>", replacement = " ", x = text.data, ignore.case = TRUE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
td.2 <= gsub(pattern = "</p>", replacement = "", x = td.1, ignore.case = TRUE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
td.2 <- gsub(pattern = "</p>", replacement = "", x = td.1, ignore.case = TRUE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
text.d <- td.2; rm(text.data, td.1, td.2)
text.d
library(tm)
txt <- VectorSource(text.d ; rm(text.d))
txt <- VectorSource(text.d) ; rm(text.d)
text.corpus <- Corpus(txt) ; rm(txt)
inspect(txt.corpus)
inspect(text.corpus)
text.corpus <- tm_map(text.corpus, tolower)
text.corpus <- tm_map(text.corpus, removePunctuation)
text.corpus <- tm_map(text.corpus, removeNumbers)
text.corpus <- tm_map(text.corpus, removeWords, stopwords("english"))
library(SnowballC)
text.corpus <- tm_map(text.corpus, stemDocument)
detach("package:SnowballC")
inspect(text.corpus)
text.corpis <- tm_map(text.corpus, stripWhitespace)
inspect(text.corpus)
inspect(text.corpis)
library(SnowballC)
text.corpis <- tm_map(text.corpis, stemDocument)
detach("package:SnowballC")
inspect(text.corpis)
CFPB2011_2_1_PR.txt <- scan("CFPB-2011-0002-0001_PR.txt", what = "character”)
N <- 80 # number of cases
p <- 12 # number of successes
stretch <- 30 # amount of time from beginning to end, here assumed to be months
id <- 1:80 # generate id numbers
dv <- c(rep(1,p),rep(0,N-p)) # makes column of p 1s and then the rest are 0s
date <- vector(len = N) # setup a vector
mask <- id<(p+1)  # these are the cases that are successes
date[mask] <- (id[mask]/p)*(stretch)  # assign them a date
date[date == 0] <- NA   # make the others missing
iv <- N - id + 1 # make a new “independent variable” that is just the id numbers going the other way
fake.data = data.frame(dv, date, iv) # note that R automatically adds the id #
fake.data
install.packages("devtools")
swirl()
library(swirl)
library(swirl)
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?
?matrix
?matrix
matrix(1:20,4,5)
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data,cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
5 !== 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate((function(x){x+1}, 6))
evaluate(function(x){x+1}, 6)
evaluate(function(x) x[1], c(8, 4, 0))
evaluate(function(x) x[length(x)], c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("hi")
submit()
mad_libs("Chicago", "gassy", "jackrabbit")
submit()
'I' %p% 'love' %p 'R!'
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shape, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 1, mean)
colMeans(iris)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$hs, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
val <- tapply(mtcars$hp, mtcars$cyl, mean)
range(val)
val[3]-val[1]
209.21429 - 82.63636
debug(ls)
ls
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
setwd("C:/Users/Soo Wan Kim/Desktop/R/R Programming")
source(makeVector.R)
source("makeVector.R")
source("cachemean.R")
a <- makeVector(c(1,2,3,4))
a <- makeVector(c(1,2,3,4))
a$get()
a$getmean()
cachemean(a)
a$getmean()
cachemean(a)
a$set(c(10,20,30,40))
a$getmean()
cachemean(a)
cachemean(a)
a$get()
crazy <- function() {
x <<- 3.14                   # variable x in the containing environment (global in this case) is updated to be 3.14
print(x)                        # since no local variable ‘x’ exists within function ‘crazy’ R searches the containing environments
{ print(x);                     # this is to demonstrate the function, not a code block, is the smallest environment in R
x <- 42; print(x)         # local variable ‘x’ is declared (created) and assigned the value 42; overrides the variable ‘x’ in
}                                  # the containing environment
print(x)                       # since local variable ‘x’ now exists within the function there is no need to search the containing
}
x <- 0
crazy()
x
setwd("~/GitHub/ProgrammingAssignment2")
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
source(“cachematrix.R”)
source("cachematrix.R")
amatrix$get()
cacheSolve(amatrix)
solve(amatrix)
amatrix
m
x
get
cacheSolve(amatrix)
m <- solve(data, ...)
m <- solve(data)
x <- matrix(c(1,2,3,4), nrow=2, ncol=2)
solve(x)
x
source("cachemean.R")
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(c(1,2,3,4))
a <- makeVector(c(1,2,3,4))
cachemean(a)
a$getmean()
cachemean(a)
a <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
a$get()
a$getinverse()
cacheSolve(a)
solve(a)
a
a$get()
?solve
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
a <- matrix(c(1,2,3,4), nrow=2, ncol=2)
solve(a)
z <- solve(a, ...)
z <- solve(a)
z
adata <- amatrix$get
adata
amatrix$get
amatrix$get()
adata <- amatrix$get()
adata
m <- solve(adata)
m
cacheSolve <- function(x) {
m
##Cache the inverse of a matrix.
##Creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
##Computes the inverse of the special "matrix" returned by makeCacheMatrix above.
##If the inverse has already been calculated (and the matrix has not changed),
##then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setmatrix(m)
m
}
